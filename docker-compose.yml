version: '3.9'

services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
      args:
        - DOCKER_BUILDKIT=1
    container_name: openetl-backend
    networks:
      - openetl-network
    depends_on:
      - db
    ports:
      - "5009:5009"
    env_file:
      - .env
    restart: always
    volumes:
      - ~/.logs:/app/.logs

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      args:
        NEXT_PUBLIC_API_URL: http://localhost:5009
    container_name: openetl-frontend
    networks:
      - openetl-network
    depends_on:
      - backend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:5009
    restart: always

  redis:
    image: redis
    container_name: redis
    networks:
      - openetl-network
    ports:
      - "6379:6379"
    restart: always

  scheduler:
    container_name: openetl-scheduler
    image: openetl-backend  # Use the backend image
    command: python3 openetl_utils/scheduler_utils.py
    env_file:
      - .env
    depends_on:
      - db
    networks:
      - openetl-network
    restart: always
    volumes:
      - ~/.logs:/app/.logs

  celery_worker-1:
    container_name: openetl-celery-worker-1
    image: openetl-backend  # Use the backend image
    command: celery -A openetl_utils.celery_utils worker --loglevel=info --concurrency=4 --pool=prefork --max-tasks-per-child=1
    networks:
      - openetl-network
    env_file:
      - .env
    depends_on:
      - redis
      - db
    restart: always
    volumes:
      - ~/.logs:/app/.logs


  db:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: openetl
      POSTGRES_PASSWORD: openetl123
      POSTGRES_DB: openetl_db
    ports:
      - "5433:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - openetl-network
    restart: always

volumes:
  pgdata:

networks:
  openetl-network:
    driver: bridge